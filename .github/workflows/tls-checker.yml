name: TLSContact Appointment Checker

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  check-appointments:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    env:
      CHECK_INTERVAL_MINUTES: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install puppeteer nodemailer puppeteer-extra puppeteer-extra-plugin-stealth puppeteer-extra-plugin-anonymize-ua
        
      - name: Check for appointments
        id: check
        uses: actions/github-script@v6
        env:
          TLS_EMAIL: ${{ secrets.TLS_EMAIL }}
          TLS_PASSWORD: ${{ secrets.TLS_PASSWORD }}
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
          USER_AGENT: ${{ steps.user_profile.outputs.user_agent }}
          SCREEN_WIDTH: ${{ steps.user_profile.outputs.width }}
          SCREEN_HEIGHT: ${{ steps.user_profile.outputs.height }}
          LANGUAGE: ${{ steps.user_profile.outputs.language }}
        with:
          script: |
            
            const puppeteer = require('puppeteer-extra');
            const StealthPlugin = require('puppeteer-extra-plugin-stealth');
            const AnonymizeUAPlugin = require('puppeteer-extra-plugin-anonymize-ua');
            
            // Apply plugins
            puppeteer.use(StealthPlugin());
            puppeteer.use(AnonymizeUAPlugin({ customFn: () => process.env.USER_AGENT }));
            
            const nodemailer = require('nodemailer');
            const fs = require('fs').promises;

            // Configuration
            const API_URLS = [
              'https://de.tlscontact.com/services/customerservice/api/tls/appointment/eg/egCAI2de/table?client=de&formGroupId=3097184&appointmentType=normal&appointmentStage=appointment',
              'https://de.tlscontact.com/services/customerservice/api/tls/appointment/eg/egCAI2de/table?client=de&formGroupId=3097184&appointmentType=prime%20time&appointmentStage=appointment',
              'https://de.tlscontact.com/services/customerservice/api/tls/appointment/eg/egCAI2de/table?client=de&formGroupId=3097184&appointmentType=prime%20time%20weekend&appointmentStage=appointment',
              'https://de.tlscontact.com/services/customerservice/api/tls/appointment/eg/egCAI2de/table?client=de&formGroupId=3097184&appointmentType=premium&appointmentStage=appointment'
            ];
            
            const config = {
              // TLSContact login credentials
              tlsContact: {
                email: process.env.TLS_EMAIL,
                password: process.env.TLS_PASSWORD,
              },
              // Email configuration
              email: {
                service: 'gmail',
                auth: {
                  user: process.env.EMAIL_USERNAME,
                  pass: process.env.EMAIL_PASSWORD
                },
                recipient: process.env.NOTIFICATION_EMAIL
              },
              // URL to check
              targetUrl: 'https://de.tlscontact.com/appointment/eg/egCAI2de/3097184'
            };
            
            // Simple delay function
            function delay(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }
            
            // Email sender setup
            const transporter = nodemailer.createTransport({
              service: config.email.service,
              auth: config.email.auth
            });
            
            // Function to send email notifications
            async function sendEmail(subject, content) {
              const mailOptions = {
                from: config.email.auth.user,
                to: config.email.recipient,
                subject: subject,
                html: content
              };
            
              try {
                const info = await transporter.sendMail(mailOptions);
                console.log(`Email sent: ${info.messageId}`);
                return true;
              } catch (error) {
                console.error('Error sending email:', error);
                return false;
              }
            }
            
            // Main function to check for appointments
            async function checkAppointments() {
              console.log(`Starting appointment check at ${new Date().toLocaleString()}`);
              let browser;
              let logMessages = [];
              const screenshotsDir = './screenshots';
              
              // Create screenshots directory if it doesn't exist
              try {
                await fs.mkdir(screenshotsDir, { recursive: true });
              } catch (err) {
                console.error(`Error creating screenshots directory: ${err.message}`);
              }
            
              // Log and track progress
              const log = (message) => {
                const timestampedMessage = `[${new Date().toLocaleTimeString()}] ${message}`;
                console.log(timestampedMessage);
                logMessages.push(timestampedMessage);
              };
            
              try {
                // Launch browser with enhanced anti-detection settings
                log('Launching browser with enhanced stealth features...');
                
                browser = await puppeteer.launch({
                  headless: true,
                  args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    `--window-size=${process.env.SCREEN_WIDTH},${process.env.SCREEN_HEIGHT}`,
                    '--disable-features=IsolateOrigins,site-per-process',
                    '--disable-accelerated-2d-canvas',
                    '--disable-gpu',
                    '--disable-notifications',
                    '--disable-extensions'
                  ]
                });
                
                const page = await browser.newPage();
                
                // Set viewport to appear more like a real browser
                await page.setViewport({
                  width: parseInt(process.env.SCREEN_WIDTH),
                  height: parseInt(process.env.SCREEN_HEIGHT),
                  deviceScaleFactor: 1,
                });
                
                // Set language and other headers to appear more like a real browser
                await page.setExtraHTTPHeaders({
                  'Accept-Language': process.env.LANGUAGE,
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                  'Accept-Encoding': 'gzip, deflate, br',
                  'Connection': 'keep-alive',
                  'Upgrade-Insecure-Requests': '1',
                  'Sec-Fetch-Dest': 'document',
                  'Sec-Fetch-Mode': 'navigate',
                  'Sec-Fetch-Site': 'none',
                  'Sec-Fetch-User': '?1'
                });
                
                // Add random mouse movements
                async function randomMouseMovements(page) {
                  const width = 1920;
                  const height = 1080;
                  
                  // Number of random movements
                  const movesCount = Math.floor(Math.random() * 5) + 2;
                  
                  for (let i = 0; i < movesCount; i++) {
                    const x = Math.floor(Math.random() * width);
                    const y = Math.floor(Math.random() * height);
                    
                    await page.mouse.move(x, y);
                    await delay(Math.random() * 1000 + 500);
                  }
                }
                
                // Add function for more human-like typing
                async function humanLikeType(page, selector, text) {
                  await page.focus(selector);
                  
                  for (const char of text) {
                    // Random delay between keystrokes (50-150ms)
                    const typeDelay = Math.floor(Math.random() * 100) + 50;
                    await page.keyboard.type(char, { delay: typeDelay });
                    
                    // Occasionally pause like a human would
                    if (Math.random() < 0.2) {
                      await delay(Math.floor(Math.random() * 400) + 100);
                    }
                  }
                }
                
                // Random delay between actions to appear more human-like
                async function randomDelay() {
                  const delayTime = Math.floor(Math.random() * 1000) + 1000;
                  await delay(delayTime);
                  return delayTime;
                }
            
                // Set up network request interception
                let appointmentFound = false;
                let requestLogs = [];
            
                await page.setRequestInterception(true);
                page.on('request', request => {
                  request.continue();
                });
            
                page.on('response', async response => {
                  const url = response.url();
                  const status = response.status();
            
                  try {
                    // Check if URL is one of our API URLs
                    if (API_URLS.some(apiUrl => url.includes(apiUrl))) {
                      const responseDetail = {
                        url: url,
                        status: status,
                        method: response.request().method()
                      };
            
                      requestLogs.push(responseDetail);
                      log(`Intercepted API call: ${url} (Status: ${status})`);
                      
                      // Check for successful appointment response
                      if (status === 200) {
                        try {
                          // Try to get response body only for certain content types
                          const contentType = response.headers()['content-type'] || '';
                          if (contentType.includes('application/json') || contentType.includes('text')) {
                            const responseBody = await response.text();
                            log(`Response body for ${url}: ${responseBody.substring(0, 100)}...`);
                            
                            // Check if response contains available dates
                            if (responseBody && 
                                (responseBody.includes('"available":true') || 
                                 responseBody.includes('"available": true'))) {
                              appointmentFound = true;
                              log('FOUND AVAILABLE APPOINTMENT SLOT!');
                            }
                          }
                        } catch (bodyError) {
                          log(`Could not read response body: ${bodyError.message}`);
                        }
                      }
                    }
                  } catch (responseError) {
                    log(`Error processing response: ${responseError.message}`);
                  }
                });
            
                // Add simple delay
                await delay(2000);
            
                // Navigate to target URL
                log(`Navigating to ${config.targetUrl}`);
                await page.goto(config.targetUrl, {
                  waitUntil: 'networkidle2',
                  timeout: 60000
                });
            
                // Take screenshot of initial page
                await page.screenshot({ path: `${screenshotsDir}/initial-page.png`, fullPage: true });
            
                // Wait for login form
                log('Waiting for login form to appear...');
                try {
                  // Wait for page to stabilize
                  await delay(3000);
                  
                  // Perform some random mouse movements to appear more human
                  await randomMouseMovements(page);
                  
                  // Add random delay
                  await randomDelay();
            
                  // Find and fill the email field using human-like typing
                  log('Filling email with human-like typing...');
                  await humanLikeType(page, 'input[type="email"], input[name="email"], input[type="text"]', config.tlsContact.email);
            
                  // Take screenshot after entering email
                  await page.screenshot({ path: `${screenshotsDir}/after-email.png` });
            
                  // Add variable delay between fields
                  const fieldDelay = await randomDelay();
                  log(`Waiting ${fieldDelay}ms between fields...`);
            
                  // Perform some random mouse movements again
                  await randomMouseMovements(page);
            
                  // Find and fill the password field with human-like typing
                  log('Filling password with human-like typing...');
                  await humanLikeType(page, 'input[type="password"], input[name="password"]', config.tlsContact.password);
            
                  // Variable delay before clicking submit
                  const preSubmitDelay = await randomDelay();
                  log(`Waiting ${preSubmitDelay}ms before submitting...`);
                  
                  // Small random mouse movement to the submit button
                  const submitButton = await page.$('button[type="submit"]');
                  if (submitButton) {
                    const boundingBox = await submitButton.boundingBox();
                    if (boundingBox) {
                      // Move to a random position on the button
                      const x = boundingBox.x + boundingBox.width * Math.random();
                      const y = boundingBox.y + boundingBox.height * Math.random();
                      await page.mouse.move(x, y);
                      await delay(Math.random() * 500 + 200);
                    }
                  }
            
                  // Take screenshot before submit
                  await page.screenshot({ path: `${screenshotsDir}/before-submit.png` });
            
                  // Find and click login button
                  log('Submitting login information...');
                  await Promise.all([
                    page.click('button[type="submit"]'),
                    page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 })
                  ]).catch(e => {
                    log(`Navigation error (may be normal): ${e.message}`);
                  });
            
                  // Take screenshot after login attempt
                  await page.screenshot({ path: `${screenshotsDir}/after-login.png`, fullPage: true });
            
                  log('Login attempt completed, monitoring for appointment availability...');
            
                  // Wait to capture API calls
                  await delay(20000);
            
                  // Take final screenshot
                  await page.screenshot({ path: `${screenshotsDir}/final-state.png`, fullPage: true });
            
                  // Check the results
                  if (appointmentFound) {
                    log('APPOINTMENT FOUND! Sending notification email...');
                    await sendEmail(
                      '🎉 TLSContact Appointment Available!',
                      `<h2>Appointment slot found!</h2>
                      <p>An appointment slot was detected on the TLSContact website at ${new Date().toLocaleString()}.</p>
                      <p>Please visit <a href="${config.targetUrl}">${config.targetUrl}</a> to book your appointment.</p>
                      <h3>API Response Details:</h3>
                      <pre>${JSON.stringify(requestLogs, null, 2)}</pre>`
                    );
                  } else {
                    log('No appointments available at this time');
                    await sendEmail(
                      'TLSContact Appointment Check - No Availability',
                      `<h2>No appointments available</h2>
                      <p>No appointment slots were found during the check at ${new Date().toLocaleString()}.</p>
                      <p>The GitHub Action will continue checking as scheduled.</p>
                      <h3>Process Log:</h3>
                      <pre>${logMessages.join('\n')}</pre>`
                    );
                  }
                } catch (formError) {
                  log(`Error on login form: ${formError.message}`);
                  // Take error screenshot
                  await page.screenshot({ path: `${screenshotsDir}/form-error.png`, fullPage: true });
                  
                  await sendEmail(
                    'TLSContact Appointment Check - Error',
                    `<h2>Error during appointment check</h2>
                    <p>An error occurred while checking for appointments at ${new Date().toLocaleString()}:</p>
                    <p><strong>${formError.message}</strong></p>
                    <h3>Process Log:</h3>
                    <pre>${logMessages.join('\n')}</pre>`
                  );
                }
            
              } catch (error) {
                log(`Critical error: ${error.message}`);
                await sendEmail(
                  'TLSContact Appointment Check - Critical Error',
                  `<h2>Critical error during appointment check</h2>
                  <p>A critical error occurred while checking for appointments at ${new Date().toLocaleString()}:</p>
                  <p><strong>${error.message}</strong></p>
                  <h3>Process Log:</h3>
                  <pre>${logMessages.join('\n')}</pre>`
                );
              } finally {
                // Small delay before closing browser
                await delay(2000);
            
                // Close browser
                if (browser) {
                  log('Closing browser');
                  await browser.close();
                }
                log('Appointment check completed');
              }
            }
            
            // Run the main function
            await checkAppointments();

      - name: Upload screenshots as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appointment-check-screenshots
          path: ./screenshots/
          retention-days: 2

      - name: Cleanup
        if: always()
        run: |
          rm -rf ./screenshots/
          echo "Cleanup completed"
